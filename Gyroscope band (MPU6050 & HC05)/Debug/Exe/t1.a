;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/2/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003D char status,data;
; 0000 003E status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003F data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0040 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0041    {
; 0000 0042    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0043 #if RX_BUFFER_SIZE == 256
; 0000 0044    // special case for receiver buffer size=256
; 0000 0045    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0046 #else
; 0000 0047    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0048    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0049       {
; 0000 004A       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 004B       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 004C       }
; 0000 004D #endif
; 0000 004E 
; 0000 004F 
; 0000 0050     if(data=='o') PORTD.2=1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0051     else       PORTD.2=0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0052 
; 0000 0053    }
;PCODE: $00000033 VOL: 0
; 0000 0054 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 005B {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 005C char data;
; 0000 005D while (rx_counter==0);
;PCODE: $0000003B VOL: 0
;	data -> R17
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005E data=rx_buffer[rx_rd_index++];
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005F #if RX_BUFFER_SIZE != 256
; 0000 0060 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0061 #endif
; 0000 0062 #asm("cli")
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
	cli
;PCODE: $0000004C VOL: 0
; 0000 0063 --rx_counter;
;PCODE: $0000004D VOL: 0
; 0000 0064 #asm("sei")
;PCODE: $0000004E VOL: 0
	sei
;PCODE: $0000004F VOL: 0
; 0000 0065 return data;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0066 }
;PCODE: $00000053 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;
;
;
;
;
;
;#include <stdlib.h>
;#include "LIB\MPU6050 LIB\MPU6050.h"
;#include "LIB\MPU6050 LIB\RA_MPU6050.h"
;#include "LIB\MPU6050 LIB\MPU6050_PR.h"
;
;float Accel_Raw_Val[3]={0,0,0};
;float AvrgAccel_Raw_Val[3]={0,0,0};
;float Accel_In_g[3]={0,0,0};
;float Accel_Offset_Val[3]={0,0,0};
;float Accel_Angle[3]={0,0,0};
;
;float Gyro_Raw_Val[3]={0,0,0};
;float AvrgGyro_Raw_Val[3]={0,0,0};
;float Gyro_Offset_Val[3]={0,0,0};
;float GyroRate_Val[3]={0,0,0};
;
;float Temp_Val;
;#pragma warn-
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;unsigned char read_i2c(unsigned char BusAddres , unsigned char Reg , unsigned char Ack )
; 0000 0088 {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0089 unsigned char Data;
; 0000 008A i2c_start();
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;	BusAddres -> Y+3
;	Reg -> Y+2
;	Ack -> Y+1
;	Data -> R17
;PCODE: $00000058 VOL: 0
; 0000 008B i2c_write(BusAddres);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 008C i2c_write(Reg);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008D i2c_start();
;PCODE: $0000005D VOL: 0
; 0000 008E i2c_write(BusAddres + 1);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008F delay_us(10);
;PCODE: $00000061 VOL: 0
; 0000 0090 Data=i2c_read(Ack);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0091 i2c_stop();
;PCODE: $00000065 VOL: 0
; 0000 0092 return Data;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0093 }
;PCODE: $0000006B VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;void write_i2c(unsigned char BusAddres , unsigned char Reg , unsigned char Data)
; 0000 0096 {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0097 i2c_start();
;PCODE: $0000006E VOL: 0
;	BusAddres -> Y+2
;	Reg -> Y+1
;	Data -> Y+0
;PCODE: $0000006F VOL: 0
; 0000 0098 i2c_write(BusAddres);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0099 i2c_write(Reg);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009A i2c_write(Data);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009B i2c_stop();
;PCODE: $00000076 VOL: 0
; 0000 009C }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// This function can test i2c communication MPU6050
;unsigned char MPU6050_Test_I2C()
; 0000 00A0 {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A1     unsigned char Data = 0x00;
; 0000 00A2     Data=read_i2c(MPU6050_ADDRESS, RA_WHO_AM_I, 0);
;PCODE: $0000007C VOL: 0
;	Data -> R17
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00A3     if(Data == 0x68)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A4         return 1;       // Means Comunication With MPU6050 is Corect
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A5     else
;PCODE: $0000008C VOL: 0
; 0000 00A6         return 0;       // Means ERROR, Stopping
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A7 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// This function can move MPU6050 to sleep
;void MPU6050_Sleep(char ON_or_OFF)
; 0000 00AB {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00AC     if(ON_or_OFF == on)
;PCODE: $00000096 VOL: 0
;	ON_or_OFF -> Y+0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00AD         write_i2c(MPU6050_ADDRESS, RA_PWR_MGMT_1, (1<<6)|(CYCLE<<5)|(TEMP_DIS<<3)|CLKSEL);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00AE     else if(ON_or_OFF == off)
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AF         write_i2c(MPU6050_ADDRESS, RA_PWR_MGMT_1, (0)|(CYCLE<<5)|(TEMP_DIS<<3)|CLKSEL);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00B0 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// This function can restor MPU6050 to default
;void MPU6050_Reset()
; 0000 00B4 {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00B5     // When set to 1, DEVICE_RESET bit in RA_PWR_MGMT_1 resets all internal registers to their default values.
; 0000 00B6     // The bit automatically clears to 0 once the reset is done.
; 0000 00B7     // The default values for each register can be found in RA_MPU6050.h
; 0000 00B8     write_i2c(MPU6050_ADDRESS, RA_PWR_MGMT_1, 0x80);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B9     // Now all reg reset to default values
; 0000 00BA }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// MPU6050 sensor initialization
;void MPU6050_Init()
; 0000 00BE {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00BF     //Sets sample rate to 1000/1+4 = 200Hz
; 0000 00C0     write_i2c(MPU6050_ADDRESS, RA_SMPLRT_DIV, SampleRateDiv);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00C1     //Disable FSync, 42Hz DLPF
; 0000 00C2     write_i2c(MPU6050_ADDRESS, RA_CONFIG, (EXT_SYNC_SET<<3)|(DLPF_CFG));
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00C3     //Disable all axis gyro self tests, scale of 2000 degrees/s
; 0000 00C4     write_i2c(MPU6050_ADDRESS, RA_GYRO_CONFIG, ((XG_ST|YG_ST|ZG_ST)<<5)|GFS_SEL);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00C5     //Disable accel self tests, scale of +-16g, no DHPF
; 0000 00C6     write_i2c(MPU6050_ADDRESS, RA_ACCEL_CONFIG, ((XA_ST|YA_ST|ZA_ST)<<5)|AFS_SEL);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00C7     //Disable sensor output to FIFO buffer
; 0000 00C8     write_i2c(MPU6050_ADDRESS, RA_FIFO_EN, FIFO_En_Parameters);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00C9 
; 0000 00CA     //Freefall threshold of |0mg|
; 0000 00CB     write_i2c(MPU6050_ADDRESS, RA_FF_THR, 0x00);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00CC     //Freefall duration limit of 0
; 0000 00CD     write_i2c(MPU6050_ADDRESS, RA_FF_DUR, 0x00);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00CE     //Motion threshold of 0mg
; 0000 00CF     write_i2c(MPU6050_ADDRESS, RA_MOT_THR, 0x00);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00D0     //Motion duration of 0s
; 0000 00D1     write_i2c(MPU6050_ADDRESS, RA_MOT_DUR, 0x00);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00D2     //Zero motion threshold
; 0000 00D3     write_i2c(MPU6050_ADDRESS, RA_ZRMOT_THR, 0x00);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00D4     //Zero motion duration threshold
; 0000 00D5     write_i2c(MPU6050_ADDRESS, RA_ZRMOT_DUR, 0x00);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00D6 
; 0000 00D7 //////////////////////////////////////////////////////////////
; 0000 00D8 //  AUX I2C setup
; 0000 00D9 //////////////////////////////////////////////////////////////
; 0000 00DA     //Sets AUX I2C to single master control, plus other config
; 0000 00DB     write_i2c(MPU6050_ADDRESS, RA_I2C_MST_CTRL, 0x00);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00DC     //Setup AUX I2C slaves
; 0000 00DD     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV0_ADDR, 0x00);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00DE     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV0_REG, 0x00);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00DF     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV0_CTRL, 0x00);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00E0 
; 0000 00E1     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV1_ADDR, 0x00);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00E2     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV1_REG, 0x00);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00E3     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV1_CTRL, 0x00);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00E4 
; 0000 00E5     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV2_ADDR, 0x00);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00E6     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV2_REG, 0x00);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00E7     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV2_CTRL, 0x00);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00E8 
; 0000 00E9     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV3_ADDR, 0x00);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00EA     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV3_REG, 0x00);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00EB     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV3_CTRL, 0x00);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00EC 
; 0000 00ED     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV4_ADDR, 0x00);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00EE     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV4_REG, 0x00);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00EF     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV4_DO, 0x00);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00F0     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV4_CTRL, 0x00);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00F1     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV4_DI, 0x00);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00F2 
; 0000 00F3     //Setup INT pin and AUX I2C pass through
; 0000 00F4     write_i2c(MPU6050_ADDRESS, RA_INT_PIN_CFG, 0x00);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00F5     //Enable data ready interrupt
; 0000 00F6     write_i2c(MPU6050_ADDRESS, RA_INT_ENABLE, 0x00);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00F7 
; 0000 00F8     //Slave out, dont care
; 0000 00F9     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV0_DO, 0x00);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00FA     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV1_DO, 0x00);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00FB     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV2_DO, 0x00);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00FC     write_i2c(MPU6050_ADDRESS, RA_I2C_SLV3_DO, 0x00);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00FD     //More slave config
; 0000 00FE     write_i2c(MPU6050_ADDRESS, RA_I2C_MST_DELAY_CTRL, 0x00);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00FF 
; 0000 0100     //Reset sensor signal paths
; 0000 0101     write_i2c(MPU6050_ADDRESS, RA_SIGNAL_PATH_RESET, 0x00);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0102     //Motion detection control
; 0000 0103     write_i2c(MPU6050_ADDRESS, RA_MOT_DETECT_CTRL, 0x00);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0104     //Disables FIFO, AUX I2C, FIFO and I2C reset bits to 0
; 0000 0105     write_i2c(MPU6050_ADDRESS, RA_USER_CTRL, 0x00);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0106 
; 0000 0107     //Sets clock source to gyro reference w/ PLL
; 0000 0108     write_i2c(MPU6050_ADDRESS, RA_PWR_MGMT_1, (SLEEP<<6)|(CYCLE<<5)|(TEMP_DIS<<3)|CLKSEL);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0109     //Controls frequency of wakeups in accel low power mode plus the sensor standby modes
; 0000 010A     write_i2c(MPU6050_ADDRESS, RA_PWR_MGMT_2, (LP_WAKE_CTRL<<6)|(STBY_XA<<5)|(STBY_YA<<4)|(STBY_ZA<<3)|(STBY_XG<<2)|(STB ...
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 010B     //Data transfer to and from the FIFO buffer
; 0000 010C     write_i2c(MPU6050_ADDRESS, RA_FIFO_R_W, 0x00);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 010D 
; 0000 010E //  MPU6050 Setup Complete
; 0000 010F }
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// get accel offset X,Y,Z
;void Get_Accel_Offset()
; 0000 0113 {
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0114   #define    NumAve4AO      100
; 0000 0115   float Ave=0;
; 0000 0116   unsigned char i= NumAve4AO;
; 0000 0117   while(i--)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;	Ave -> Y+1
;	i -> R17
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0118   {
; 0000 0119     Accel_Offset_Val[X] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_XOUT_H, 0)<<8)|
; 0000 011A                             read_i2c(MPU6050_ADDRESS, RA_ACCEL_XOUT_L, 0)   );
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 011B     Ave = (float) Ave + (Accel_Offset_Val[X] / NumAve4AO);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 011C     delay_us(10);
;PCODE: $000001E8 VOL: 0
; 0000 011D   }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 011E   Accel_Offset_Val[X] = Ave;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 011F   Ave = 0;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0120   i = NumAve4AO;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0121   while(i--)
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0122   {
; 0000 0123     Accel_Offset_Val[Y] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_YOUT_H, 0)<<8)|
; 0000 0124                             read_i2c(MPU6050_ADDRESS, RA_ACCEL_YOUT_L, 0)   );
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0125     Ave = (float) Ave + (Accel_Offset_Val[Y] / NumAve4AO);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0126     delay_us(10);
;PCODE: $00000213 VOL: 0
; 0000 0127   }
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0128   Accel_Offset_Val[Y] = Ave;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0129   Ave = 0;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 012A   i = NumAve4AO;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 012B   while(i--)
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 012C   {
; 0000 012D     Accel_Offset_Val[Z] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_ZOUT_H, 0)<<8)|
; 0000 012E                             read_i2c(MPU6050_ADDRESS, RA_ACCEL_ZOUT_L, 0)   );
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 012F     Ave = (float) Ave + (Accel_Offset_Val[Z] / NumAve4AO);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0130     delay_us(10);
;PCODE: $0000023F VOL: 0
; 0000 0131   }
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0132   Accel_Offset_Val[Z] = Ave;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0133 }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// Gets raw accelerometer data, performs no processing
;void Get_Accel_Val()
; 0000 0137 {
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0138     Accel_Raw_Val[X] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_XOUT_H, 0)<<8)|
; 0000 0139                          read_i2c(MPU6050_ADDRESS, RA_ACCEL_XOUT_L, 0)    );
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 013A     Accel_Raw_Val[Y] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_YOUT_H, 0)<<8)|
; 0000 013B                          read_i2c(MPU6050_ADDRESS, RA_ACCEL_YOUT_L, 0)    );
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 013C     Accel_Raw_Val[Z] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_ZOUT_H, 0)<<8)|
; 0000 013D                          read_i2c(MPU6050_ADDRESS, RA_ACCEL_ZOUT_L, 0)    );
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 013E 
; 0000 013F     Accel_In_g[X] = Accel_Raw_Val[X] - Accel_Offset_Val[X];
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0140     Accel_In_g[Y] = Accel_Raw_Val[Y] - Accel_Offset_Val[Y];
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0141     Accel_In_g[Z] = Accel_Raw_Val[Z] - Accel_Offset_Val[Z];
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0142 
; 0000 0143     Accel_In_g[X] = Accel_In_g[X] / ACCEL_Sensitivity;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0144     Accel_In_g[Y] = Accel_In_g[Y] / ACCEL_Sensitivity;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0145     Accel_In_g[Z] = Accel_In_g[Z] / ACCEL_Sensitivity;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0146 }
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// Gets n average raw accelerometer data, performs no processing
;void Get_AvrgAccel_Val()
; 0000 014A {
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 014B   #define    NumAve4A      50
; 0000 014C   float Ave=0;
; 0000 014D   unsigned char i= NumAve4A;
; 0000 014E   while(i--)
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;	Ave -> Y+1
;	i -> R17
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 014F   {
; 0000 0150     AvrgAccel_Raw_Val[X] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_XOUT_H, 0)<<8)|
; 0000 0151                              read_i2c(MPU6050_ADDRESS, RA_ACCEL_XOUT_L, 0)   );
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0152     Ave = (float) Ave + (AvrgAccel_Raw_Val[X] / NumAve4A);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0153     delay_us(10);
;PCODE: $000002DC VOL: 0
; 0000 0154   }
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 0155   AvrgAccel_Raw_Val[X] = Ave;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0156   Ave = 0;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0157   i = NumAve4A;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 0158   while(i--)
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0159   {
; 0000 015A     AvrgAccel_Raw_Val[Y] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_YOUT_H, 0)<<8)|
; 0000 015B                              read_i2c(MPU6050_ADDRESS, RA_ACCEL_YOUT_L, 0)   );
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 015C     Ave = (float) Ave + (AvrgAccel_Raw_Val[Y] / NumAve4A);
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 015D     delay_us(10);
;PCODE: $00000307 VOL: 0
; 0000 015E   }
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 015F   AvrgAccel_Raw_Val[Y] = Ave;
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0160   Ave = 0;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 0161   i = NumAve4A;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0162   while(i--)
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 0163   {
; 0000 0164     AvrgAccel_Raw_Val[Z] = ((read_i2c(MPU6050_ADDRESS, RA_ACCEL_ZOUT_H, 0)<<8)|
; 0000 0165                              read_i2c(MPU6050_ADDRESS, RA_ACCEL_ZOUT_L, 0)   );
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0166     Ave = (float) Ave + (AvrgAccel_Raw_Val[Z] / NumAve4A);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0167     delay_us(10);
;PCODE: $00000333 VOL: 0
; 0000 0168   }
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0169   AvrgAccel_Raw_Val[Z] = Ave;
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 016A 
; 0000 016B   Accel_In_g[X] = AvrgAccel_Raw_Val[X] - Accel_Offset_Val[X];
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 016C   Accel_In_g[Y] = AvrgAccel_Raw_Val[Y] - Accel_Offset_Val[Y];
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 016D   Accel_In_g[Z] = AvrgAccel_Raw_Val[Z] - Accel_Offset_Val[Z];
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 016E 
; 0000 016F   Accel_In_g[X] = Accel_In_g[X] / ACCEL_Sensitivity;  //  g/LSB
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0170   Accel_In_g[Y] = Accel_In_g[Y] / ACCEL_Sensitivity;  //  g/LSB
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 0171   Accel_In_g[Z] = Accel_In_g[Z] / ACCEL_Sensitivity;  //  g/LSB
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0172 
; 0000 0173 }
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// Gets angles from accelerometer data
;void Get_Accel_Angles()
; 0000 0177 {
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 0178 // If you want be averaged of accelerometer data, write (on),else write (off)
; 0000 0179 #define  GetAvrg  on
; 0000 017A 
; 0000 017B #if GetAvrg == on
; 0000 017C     Get_AvrgAccel_Val();
;PCODE: $00000362 VOL: 0
; 0000 017D //  Calculate The Angle Of Each Axis
; 0000 017E     Accel_Angle[X] = 57.295*atan((float) AvrgAccel_Raw_Val[X] / sqrt(pow((float)AvrgAccel_Raw_Val[Z],2)+pow((float)AvrgA ...
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 017F     Accel_Angle[Y] = 57.295*atan((float) AvrgAccel_Raw_Val[Y] / sqrt(pow((float)AvrgAccel_Raw_Val[Z],2)+pow((float)AvrgA ...
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 0180     Accel_Angle[Z] = 57.295*atan((float) sqrt(pow((float)AvrgAccel_Raw_Val[X],2)+pow((float)AvrgAccel_Raw_Val[Y],2))/ Av ...
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 0181 #else
; 0000 0182     Get_Accel_Val();
; 0000 0183 //  Calculate The Angle Of Each Axis
; 0000 0184     Accel_Angle[X] = 57.295*atan((float) Accel_Raw_Val[X] / sqrt(pow((float)Accel_Raw_Val[Z],2)+pow((float)Accel_Raw_Val ...
; 0000 0185     Accel_Angle[Y] = 57.295*atan((float) Accel_Raw_Val[Y] / sqrt(pow((float)Accel_Raw_Val[Z],2)+pow((float)Accel_Raw_Val ...
; 0000 0186     Accel_Angle[Z] = 57.295*atan((float) sqrt(pow((float)Accel_Raw_Val[X],2)+pow((float)Accel_Raw_Val[Y],2))/ Accel_Raw_ ...
; 0000 0187 #endif
; 0000 0188 
; 0000 0189 }
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// get gyro offset X,Y,Z
;void Get_Gyro_Offset()
; 0000 018D {
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 018E   #define    NumAve4GO      100
; 0000 018F 
; 0000 0190   float Ave = 0;
; 0000 0191   unsigned char i = NumAve4GO;
; 0000 0192   Gyro_Offset_Val[X] = Gyro_Offset_Val[Y] = Gyro_Offset_Val[Z] = 0;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;	Ave -> Y+1
;	i -> R17
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 0193 
; 0000 0194   while(i--)
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 0195   {
; 0000 0196     Gyro_Offset_Val[X] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_XOUT_H, 0)<<8)|
; 0000 0197                            read_i2c(MPU6050_ADDRESS, RA_GYRO_XOUT_L, 0)   );
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 0198     Ave = (float) Ave + (Gyro_Offset_Val[X] / NumAve4GO);
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 0199     delay_us(1);
;PCODE: $000003E0 VOL: 0
; 0000 019A   }
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 019B   Gyro_Offset_Val[X] = Ave;
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 019C   Ave = 0;
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 019D   i = NumAve4GO;
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 019E   while(i--)
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 019F   {
; 0000 01A0     Gyro_Offset_Val[Y] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_YOUT_H, 0)<<8)|
; 0000 01A1                            read_i2c(MPU6050_ADDRESS, RA_GYRO_YOUT_L, 0)   );
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 01A2     Ave = (float) Ave + (Gyro_Offset_Val[Y] / NumAve4GO);
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 01A3     delay_us(1);
;PCODE: $0000040B VOL: 0
; 0000 01A4   }
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 01A5   Gyro_Offset_Val[Y] = Ave;
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 01A6   Ave = 0;
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 01A7   i = NumAve4GO;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 01A8   while(i--)
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0000 01A9   {
; 0000 01AA       Gyro_Offset_Val[Z] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_ZOUT_H, 0)<<8)|
; 0000 01AB                              read_i2c(MPU6050_ADDRESS, RA_GYRO_ZOUT_L, 0)   );
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 01AC     Ave = (float) Ave + (Gyro_Offset_Val[Z] / NumAve4GO);
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 01AD     delay_us(1);
;PCODE: $00000437 VOL: 0
; 0000 01AE   }
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 01AF   Gyro_Offset_Val[Z] = Ave;
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 01B0 
; 0000 01B1 }
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// Function to read the gyroscope rate data and convert it into degrees/s
;void Get_Gyro_Val()
; 0000 01B5 {
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 01B6     Gyro_Raw_Val[X] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_XOUT_H, 0)<<8) |
; 0000 01B7                         read_i2c(MPU6050_ADDRESS, RA_GYRO_XOUT_L, 0))    ;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 01B8     Gyro_Raw_Val[Y] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_YOUT_H, 0)<<8) |
; 0000 01B9                         read_i2c(MPU6050_ADDRESS, RA_GYRO_YOUT_L, 0))    ;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01BA     Gyro_Raw_Val[Z] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_ZOUT_H, 0)<<8) |
; 0000 01BB                         read_i2c(MPU6050_ADDRESS, RA_GYRO_ZOUT_L, 0))    ;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 01BC 
; 0000 01BD     GyroRate_Val[X] = Gyro_Raw_Val[X] - Gyro_Offset_Val[X];
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 01BE     GyroRate_Val[Y] = Gyro_Raw_Val[Y] - Gyro_Offset_Val[Y];
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 01BF     GyroRate_Val[Z] = Gyro_Raw_Val[Z] - Gyro_Offset_Val[Z];
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 01C0 
; 0000 01C1     GyroRate_Val[X] = GyroRate_Val[X] / GYRO_Sensitivity;
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 01C2     GyroRate_Val[Y] = GyroRate_Val[Y] / GYRO_Sensitivity;
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0000 01C3     GyroRate_Val[Z] = GyroRate_Val[Z] / GYRO_Sensitivity;
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 01C4 
; 0000 01C5 }
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// Function to read the Avrrage of gyroscope rate data and convert it into degrees/s
;void Get_AvrgGyro_Val()
; 0000 01C9 {
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
; 0000 01CA   #define    NumAve4G      50
; 0000 01CB 
; 0000 01CC   float Ave = 0;
; 0000 01CD   unsigned char i = NumAve4G;
; 0000 01CE   AvrgGyro_Raw_Val[X] = AvrgGyro_Raw_Val[Y] = AvrgGyro_Raw_Val[Z] = 0;
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;	Ave -> Y+1
;	i -> R17
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 01CF 
; 0000 01D0   while(i--)
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 01D1   {
; 0000 01D2     AvrgGyro_Raw_Val[X] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_XOUT_H, 0)<<8)|
; 0000 01D3                             read_i2c(MPU6050_ADDRESS, RA_GYRO_XOUT_L, 0)   );
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 01D4     Ave = (float) Ave + (AvrgGyro_Raw_Val[X] / NumAve4G);
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 01D5     delay_us(1);
;PCODE: $000004DA VOL: 0
; 0000 01D6   }
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
; 0000 01D7   AvrgGyro_Raw_Val[X] = Ave;
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 01D8   Ave = 0;
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
; 0000 01D9   i = NumAve4G;
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 01DA   while(i--)
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0000 01DB   {
; 0000 01DC     AvrgGyro_Raw_Val[Y] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_YOUT_H, 0)<<8)|
; 0000 01DD                             read_i2c(MPU6050_ADDRESS, RA_GYRO_YOUT_L, 0)   );
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 01DE     Ave = (float) Ave + (AvrgGyro_Raw_Val[Y] / NumAve4G);
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0000 01DF     delay_us(1);
;PCODE: $00000505 VOL: 0
; 0000 01E0   }
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 01E1   AvrgGyro_Raw_Val[Y] = Ave;
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 01E2   Ave = 0;
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 0000 01E3   i = NumAve4G;
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 0000 01E4   while(i--)
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 01E5   {
; 0000 01E6     AvrgGyro_Raw_Val[Z] = ((read_i2c(MPU6050_ADDRESS, RA_GYRO_ZOUT_H, 0)<<8)|
; 0000 01E7                             read_i2c(MPU6050_ADDRESS, RA_GYRO_ZOUT_L, 0)   );
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 01E8     Ave = (float) Ave + (AvrgGyro_Raw_Val[Z] / NumAve4G);
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 01E9     delay_us(1);
;PCODE: $00000531 VOL: 0
; 0000 01EA   }
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 01EB   AvrgGyro_Raw_Val[Z] = Ave;
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
; 0000 01EC 
; 0000 01ED   GyroRate_Val[X] = AvrgGyro_Raw_Val[X] - Gyro_Offset_Val[X];
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
; 0000 01EE   GyroRate_Val[Y] = AvrgGyro_Raw_Val[Y] - Gyro_Offset_Val[Y];
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 01EF   GyroRate_Val[Z] = AvrgGyro_Raw_Val[Z] - Gyro_Offset_Val[Z];
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 01F0 
; 0000 01F1   GyroRate_Val[X] = GyroRate_Val[X] / GYRO_Sensitivity;   // (º/s)/LSB
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
; 0000 01F2   GyroRate_Val[Y] = GyroRate_Val[Y] / GYRO_Sensitivity;   // (º/s)/LSB
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 0000 01F3   GyroRate_Val[Z] = GyroRate_Val[Z] / GYRO_Sensitivity;   // (º/s)/LSB
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0000 01F4 
; 0000 01F5 }
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;// Function to read the Temperature
;void Get_Temp_Val()
; 0000 01F9 {
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 01FA     Temp_Val = ((read_i2c(MPU6050_ADDRESS, RA_TEMP_OUT_H, 0)<< 8)|
; 0000 01FB                   read_i2c(MPU6050_ADDRESS, RA_TEMP_OUT_L, 0)   );
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 01FC // Compute the temperature in degrees
; 0000 01FD     Temp_Val = (Temp_Val /TEMP_Sensitivity) + 36.53;
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 01FE }
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;
;
;// Declare your global variables here
;void WaitInPrint()
; 0000 0203     {
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0000 0204     getchar();
;PCODE: $0000057E VOL: 0
; 0000 0205     }
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;
;
;
;
;
;
;void print();
;int cnt1,x,y;
;
;int action;
;void main(void)
; 0000 0211 {
;PCODE: $00000581 VOL: 0
; 0000 0212 // Declare your local variables here
; 0000 0213 
; 0000 0214 // Input/Output Ports initialization
; 0000 0215 // Port B initialization
; 0000 0216 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0217 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0000 0218 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0219 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0000 021A 
; 0000 021B // Port C initialization
; 0000 021C // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 021D DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 021E // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 021F PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 0220 
; 0000 0221 // Port D initialization
; 0000 0222 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 0223 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 0224 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 0225 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 0226 
; 0000 0227 // Timer/Counter 0 initialization
; 0000 0228 // Clock source: System Clock
; 0000 0229 // Clock value: Timer 0 Stopped
; 0000 022A TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
; 0000 022B TCNT0=0x00;
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 022C 
; 0000 022D // Timer/Counter 1 initialization
; 0000 022E // Clock source: System Clock
; 0000 022F // Clock value: Timer1 Stopped
; 0000 0230 // Mode: Normal top=0xFFFF
; 0000 0231 // OC1A output: Disconnected
; 0000 0232 // OC1B output: Disconnected
; 0000 0233 // Noise Canceler: Off
; 0000 0234 // Input Capture on Falling Edge
; 0000 0235 // Timer1 Overflow Interrupt: Off
; 0000 0236 // Input Capture Interrupt: Off
; 0000 0237 // Compare A Match Interrupt: Off
; 0000 0238 // Compare B Match Interrupt: Off
; 0000 0239 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 023A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 023B TCNT1H=0x00;
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
; 0000 023C TCNT1L=0x00;
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 023D ICR1H=0x00;
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 023E ICR1L=0x00;
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 023F OCR1AH=0x00;
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 0240 OCR1AL=0x00;
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 0241 OCR1BH=0x00;
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
; 0000 0242 OCR1BL=0x00;
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 0243 
; 0000 0244 // Timer/Counter 2 initialization
; 0000 0245 // Clock source: System Clock
; 0000 0246 // Clock value: Timer2 Stopped
; 0000 0247 // Mode: Normal top=0xFF
; 0000 0248 // OC2 output: Disconnected
; 0000 0249 ASSR=0<<AS2;
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 024A TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 024B TCNT2=0x00;
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
; 0000 024C OCR2=0x00;
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 024D 
; 0000 024E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 024F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
; 0000 0250 
; 0000 0251 // External Interrupt(s) initialization
; 0000 0252 // INT0: Off
; 0000 0253 // INT1: Off
; 0000 0254 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
; 0000 0255 
; 0000 0256 // USART initialization
; 0000 0257 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0258 // USART Receiver: On
; 0000 0259 // USART Transmitter: On
; 0000 025A // USART Mode: Asynchronous
; 0000 025B // USART Baud Rate: 9600
; 0000 025C UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
; 0000 025D UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
; 0000 025E UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 025F UBRRH=0x00;
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 0000 0260 UBRRL=0x33;
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0000 0261 
; 0000 0262 // Analog Comparator initialization
; 0000 0263 // Analog Comparator: Off
; 0000 0264 // The Analog Comparator's positive input is
; 0000 0265 // connected to the AIN0 pin
; 0000 0266 // The Analog Comparator's negative input is
; 0000 0267 // connected to the AIN1 pin
; 0000 0268 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
; 0000 0269 SFIOR=(0<<ACME);
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
; 0000 026A 
; 0000 026B // ADC initialization
; 0000 026C // ADC disabled
; 0000 026D ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
; 0000 026E 
; 0000 026F // SPI initialization
; 0000 0270 // SPI disabled
; 0000 0271 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0000 0272 
; 0000 0273 // TWI initialization
; 0000 0274 // TWI disabled
; 0000 0275 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
; 0000 0276 
; 0000 0277 // Bit-Banged I2C Bus initialization
; 0000 0278 // I2C Port: PORTC
; 0000 0279 // I2C SDA bit: 3
; 0000 027A // I2C SCL bit: 2
; 0000 027B // Bit Rate: 100 kHz
; 0000 027C // Note: I2C settings are specified in the
; 0000 027D // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 027E i2c_init();
;PCODE: $000005C6 VOL: 0
; 0000 027F 
; 0000 0280 // Global enable interrupts
; 0000 0281 #asm("sei")
;PCODE: $000005C7 VOL: 0
	sei
;PCODE: $000005C8 VOL: 0
; 0000 0282 PORTD.2=1;
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0000 0283 delay_ms(100);
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0000 0284 PORTD.2=0;
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
; 0000 0285 delay_ms(100);
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
; 0000 0286 PORTD.2=1;
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
; 0000 0287 delay_ms(100);
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
; 0000 0288 PORTD.2=0;
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
; 0000 0289 delay_ms(100);
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 0000 028A 
; 0000 028B MPU6050_Init();
;PCODE: $000005DD VOL: 0
; 0000 028C Get_Accel_Offset();
;PCODE: $000005DE VOL: 0
; 0000 028D Get_Gyro_Offset();
;PCODE: $000005DF VOL: 0
; 0000 028E 
; 0000 028F 
; 0000 0290 while (1)
;PCODE: $000005E0 VOL: 0
; 0000 0291     {
; 0000 0292 
; 0000 0293     //Get_Temp_Val();
; 0000 0294 
; 0000 0295     //Get_Gyro_Val();
; 0000 0296     //Get_AvrgGyro_Val();
; 0000 0297     Get_Accel_Val();
;PCODE: $000005E1 VOL: 0
; 0000 0298     //Get_AvrgAccel_Val();
; 0000 0299     //Get_Accel_Angles();
; 0000 029A 
; 0000 029B     x=Accel_Raw_Val[X]/100;
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
; 0000 029C     y=Accel_Raw_Val[Y]/100;
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
; 0000 029D 
; 0000 029E 
; 0000 029F     if(x>80)
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
; 0000 02A0         {
; 0000 02A1         if(y>=80)                 action='Q';
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
; 0000 02A2         else if(y<80 && y>=-80)   action='F';
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
; 0000 02A3         else if(y<-80)            action='E';
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
; 0000 02A4         }
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
; 0000 02A5     else if(x<80 && x>=-80)
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
; 0000 02A6         {
; 0000 02A7         if(y>=80)                 action='L';
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
; 0000 02A8         else if(y<80 && y>=-80)  action='S';
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
; 0000 02A9         else if(y<-80)  action='R';
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0000 02AA         }
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
; 0000 02AB     else if(x<-80)
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
; 0000 02AC         {
; 0000 02AD         if(y>=80)                action='Z';
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 02AE         else if(y<80 && y>=-80)  action='G';
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
; 0000 02AF         else if(y<-80)           action='C';
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
; 0000 02B0         }
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
; 0000 02B1 
; 0000 02B2     putchar(action);
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
; 0000 02B3     }
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
; 0000 02B4 }
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;
;void print()
; 0000 02B7     {
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
; 0000 02B8     puts("X:");
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0000 02B9     if(x>=0)
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0000 02BA         {
; 0000 02BB         putchar('+');
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
; 0000 02BC         putchar((x/100)%10+'0');
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
; 0000 02BD         putchar((x/10)%10+'0');
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
; 0000 02BE         putchar((x/1)%10+'0');
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
; 0000 02BF         }
; 0000 02C0     else if(x < 0)
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
; 0000 02C1         {
; 0000 02C2         putchar('-');
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
; 0000 02C3         putchar((-x/100)%10+'0');
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
; 0000 02C4         putchar((-x/10)%10+'0');
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
; 0000 02C5         putchar((-x/1)%10+'0');
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
; 0000 02C6         }
; 0000 02C7     puts("_Y:");
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
; 0000 02C8 
; 0000 02C9     if(y>=0)
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
; 0000 02CA         {
; 0000 02CB         putchar('+');
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
; 0000 02CC         putchar((y/100)%10+'0');
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; 0000 02CD         putchar((y/10)%10+'0');
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
; 0000 02CE         putchar((y/1)%10+'0');
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
; 0000 02CF         }
; 0000 02D0     else if(y < 0)
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
; 0000 02D1         {
; 0000 02D2         putchar('-');
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
; 0000 02D3         putchar((-y/100)%10+'0');
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 02D4         putchar((-y/10)%10+'0');
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
; 0000 02D5         putchar((-y/1)%10+'0');
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
; 0000 02D6         }
; 0000 02D7     puts("_______________________");
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0000 02D8     delay_ms(10);
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
; 0000 02D9     }
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0

	.DSEG
_0x61:
	.BYTE 0x1F
