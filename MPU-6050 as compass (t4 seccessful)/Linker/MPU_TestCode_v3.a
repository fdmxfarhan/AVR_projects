;/*****************************************************
;CodeWizardAVR V2.05.3 Standard
;
;Project : Test & Start MPU6050 Sensor With I2C Comunication & Usart Monitoring
;Version : 3.0
;Date    : 1392/9/20
;Author  : S_Ahmad
;Company : www.RoboticNGO.com    www.ECA.ir
;Comments:
;
;Chip type               : ATmega32
;AVR Core Clock frequency: 8.000000 MHz
;*****************************************************/
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <i2c.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include "LIB\MPU6050 LIB\MPU6050.h"
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;void WaitInPrint()
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0017     getchar();
;PCODE: $0000000F VOL: 0
; 0000 0018 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;//////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
;void main(void)
; 0000 001B {
;PCODE: $00000012 VOL: 0
; 0000 001C PORTA=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001D DDRA=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001E 
; 0000 001F PORTB=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0020 DDRB=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0021 
; 0000 0022 PORTC=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0023 DDRC=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0024 
; 0000 0025 PORTD=0x60;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0026 DDRD=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0027 
; 0000 0028 // Timer/Counter 0 initialization
; 0000 0029 // Clock source: System Clock
; 0000 002A // Clock value: Timer 0 Stopped
; 0000 002B // Mode: Normal top=0xFF
; 0000 002C // OC0 output: Disconnected
; 0000 002D TCCR0=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002E TCNT0=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002F OCR0=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0030 
; 0000 0031 // Timer/Counter 1 initialization
; 0000 0032 // Clock source: System Clock
; 0000 0033 // Clock value: Timer1 Stopped
; 0000 0034 // Mode: Normal top=0xFFFF
; 0000 0035 // OC1A output: Discon.
; 0000 0036 // OC1B output: Discon.
; 0000 0037 // Noise Canceler: Off
; 0000 0038 // Input Capture on Falling Edge
; 0000 0039 // Timer1 Overflow Interrupt: Off
; 0000 003A // Input Capture Interrupt: Off
; 0000 003B // Compare A Match Interrupt: Off
; 0000 003C // Compare B Match Interrupt: Off
; 0000 003D TCCR1A=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003E TCCR1B=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003F TCNT1H=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0040 TCNT1L=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0041 ICR1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0042 ICR1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0043 OCR1AH=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0044 OCR1AL=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0045 OCR1BH=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0046 OCR1BL=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0047 
; 0000 0048 // Timer/Counter 2 initialization
; 0000 0049 // Clock source: System Clock
; 0000 004A // Clock value: Timer2 Stopped
; 0000 004B // Mode: Normal top=0xFF
; 0000 004C // OC2 output: Disconnected
; 0000 004D ASSR=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004E TCCR2=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004F TCNT2=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0050 OCR2=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0051 
; 0000 0052 // External Interrupt(s) initialization
; 0000 0053 // INT0: Off
; 0000 0054 // INT1: Off
; 0000 0055 // INT2: Off
; 0000 0056 MCUCR=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0057 MCUCSR=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0058 
; 0000 0059 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 005A TIMSK=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005B 
; 0000 005C // USART initialization
; 0000 005D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 005E // USART Receiver: On
; 0000 005F // USART Transmitter: On
; 0000 0060 // USART Mode: Asynchronous
; 0000 0061 // USART Baud Rate: 9600
; 0000 0062 UCSRA=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0063 UCSRB=0x18;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0064 UCSRC=0x86;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0065 UBRRH=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0066 UBRRL=0x33;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0067 
; 0000 0068 // Analog Comparator initialization
; 0000 0069 // Analog Comparator: Off
; 0000 006A // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 006B ACSR=0x80;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006C SFIOR=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 006D 
; 0000 006E // ADC initialization
; 0000 006F // ADC disabled
; 0000 0070 ADCSRA=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0071 
; 0000 0072 // SPI initialization
; 0000 0073 // SPI disabled
; 0000 0074 SPCR=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0075 
; 0000 0076 // TWI initialization
; 0000 0077 // TWI disabled
; 0000 0078 TWCR=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0079 
; 0000 007A // I2C Bus initialization
; 0000 007B // I2C Port: PORTC
; 0000 007C // I2C SDA bit: 1
; 0000 007D // I2C SCL bit: 0
; 0000 007E // Bit Rate: 100 kHz
; 0000 007F // Note: I2C settings are specified in the
; 0000 0080 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0081 i2c_init();
;PCODE: $0000005F VOL: 0
; 0000 0082 //////--<><><>----<><><>  S_Ahmad  <<<<  www.RoboticNGO.com  >>>>  MPU6050 Lib  <><><>----<><><>--
; 0000 0083 printf("\n\rwww.RoboticNGO.com\n\rwww.ECA.ir\n\r\n\r");
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0084 WaitInPrint();
;PCODE: $00000067 VOL: 0
; 0000 0085 
; 0000 0086     if(MPU6050_Test_I2C())
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0087     {
; 0000 0088         printf("Correct, MPU6050 Addr is 0x%X \n\r",MPU6050_ADDRESS);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0089         WaitInPrint();
;PCODE: $00000074 VOL: 0
; 0000 008A     }
; 0000 008B     else
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008C     {
; 0000 008D         printf("ERROR, Stopping \n\r");
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008E         WaitInPrint();
;PCODE: $0000007E VOL: 0
; 0000 008F     }
;PCODE: $0000007F VOL: 0
; 0000 0090 
; 0000 0091 MPU6050_Init();
;PCODE: $00000080 VOL: 0
; 0000 0092 printf("MPU6050 Setup ==> Complete\n\r\n\r");
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0093 
; 0000 0094 Get_Accel_Offset();
;PCODE: $00000088 VOL: 0
; 0000 0095 Get_Gyro_Offset();
;PCODE: $00000089 VOL: 0
; 0000 0096 printf("Accel Offset Val: %.2f , %.2f , %.2f \n\r",Accel_Offset_Val[X],Accel_Offset_Val[Y],Accel_Offset_Val[Z]);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0097 printf("Gyro  Offset Val: %.2f , %.2f , %.2f \n\r",Gyro_Offset_Val[X],Gyro_Offset_Val[Y],Gyro_Offset_Val[Z]);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0098 WaitInPrint();
;PCODE: $000000A8 VOL: 0
; 0000 0099 
; 0000 009A     while (1)
;PCODE: $000000A9 VOL: 0
; 0000 009B     {
; 0000 009C         WaitInPrint();
;PCODE: $000000AA VOL: 0
; 0000 009D         puts("\n");
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 009E 
; 0000 009F         Get_Temp_Val();
;PCODE: $000000AE VOL: 0
; 0000 00A0 
; 0000 00A1         Get_Gyro_Val();
;PCODE: $000000AF VOL: 0
; 0000 00A2         Get_AvrgGyro_Val();
;PCODE: $000000B0 VOL: 0
; 0000 00A3 
; 0000 00A4         Get_Accel_Val();
;PCODE: $000000B1 VOL: 0
; 0000 00A5         Get_AvrgAccel_Val();
;PCODE: $000000B2 VOL: 0
; 0000 00A6         Get_Accel_Angles();
;PCODE: $000000B3 VOL: 0
; 0000 00A7 
; 0000 00A8         printf("Temp Val is: %.1f degree Celsius \n\r",Temp_Val);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A9 
; 0000 00AA         printf("\n");
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00AB 
; 0000 00AC         printf("    Gyro Raw  Val: %.0f , %.0f , %.0f \n\r",Gyro_Raw_Val[X],Gyro_Raw_Val[Y],Gyro_Raw_Val[Z]);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00AD         printf("AvrgGyro Raw  Val: %.0f , %.0f , %.0f \n\r",AvrgGyro_Raw_Val[X],AvrgGyro_Raw_Val[Y],AvrgGyro_Raw_Val[Z]) ...
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00AE         printf("    Gyro Rate Val: %.1f , %.1f , %.1f \n\r",GyroRate_Val[X],GyroRate_Val[Y],GyroRate_Val[Z]);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00AF 
; 0000 00B0         printf("\n");
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00B1 
; 0000 00B2         printf("    Accel Raw Val: %.1f , %.1f , %.1f \n\r",Accel_Raw_Val[X],Accel_Raw_Val[Y],Accel_Raw_Val[Z]);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B3         printf("AvrgAccel Raw Val: %.1f , %.1f , %.1f \n\r",AvrgAccel_Raw_Val[X],AvrgAccel_Raw_Val[Y],AvrgAccel_Raw_Val[ ...
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B4         printf("  Accel In 1G Val: %.1f , %.1f , %.1f \n\r",Accel_In_g[X],Accel_In_g[Y],Accel_In_g[Z]);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00B5         printf("Accel  Angle  Val: %.1f , %.1f , %.1f \n\r",Accel_Angle[X],Accel_Angle[Y],Accel_Angle[Z]);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00B6 
; 0000 00B7     }
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00B8 }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0

	.DSEG
_0x8:
	.BYTE 0x2
