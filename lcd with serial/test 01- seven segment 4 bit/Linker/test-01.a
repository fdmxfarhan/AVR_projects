;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/4/2016
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x40
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0022 // Delay needed for the stabilization of the ADC input voltage
; 0000 0023 delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0024 // Start the AD conversion
; 0000 0025 ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0026 // Wait for the AD conversion to complete
; 0000 0027 while ((ADCSRA & 0x10)==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0028 ADCSRA|=0x10;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0029 return ADCW;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002A }
;PCODE: $00000020 VOL: 0
;
;// Declare your global variables here
;void segshow(int b)
; 0000 002E     {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002F     if (b==0) PORTC=0b00000011;
;	b -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0030     else if(b==1) PORTC=0b10011111;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0031     else if(b==2) PORTC=0b00100101;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0032     else if(b==3) PORTC=0b00001101;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0033     else if(b==4) PORTC=0b10011001;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0034     else if(b==5) PORTC=0b01001001;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0035     else if(b==6) PORTC=0b01000001;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0036     else if(b==7) PORTC=0b00011111;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0037     else if(b==8) PORTC=0b00000001;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0038     else if(b==9) PORTC=0b00001001;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0039     }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;void seg(int a)
; 0000 003B     {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 003C     PORTD.0=0;
;	a -> Y+0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 003D     PORTD.1=0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 003E     PORTD.2=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 003F     PORTD.3=0;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0040 
; 0000 0041     PORTD.0=1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0042     segshow((a/1000)%10);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0043     PORTD.0=0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0044     PORTD.1=1;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0045     segshow((a/100)%10);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0046     PORTD.1=0;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0047     PORTD.2=1;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0048     segshow((a/10)%10);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0049     PORTD.2=0;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 004A     PORTD.3=1;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 004B     segshow((a/1)%10);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 004C     PORTD.3=0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 004D     }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;int i,j;
;
;void main(void)
; 0000 0051 {
;PCODE: $000000AE VOL: 0
; 0000 0052 // Declare your local variables here
; 0000 0053 
; 0000 0054 // Input/Output Ports initialization
; 0000 0055 // Port A initialization
; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0057 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0058 PORTA=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0059 DDRA=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 005A 
; 0000 005B // Port B initialization
; 0000 005C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005E PORTB=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 005F DDRB=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0060 
; 0000 0061 // Port C initialization
; 0000 0062 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0063 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0064 PORTC=0xFF;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0065 DDRC=0xFF;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0066 
; 0000 0067 // Port D initialization
; 0000 0068 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0069 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 006A PORTD=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 006B DDRD=0xFF;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 006C 
; 0000 006D // Timer/Counter 0 initialization
; 0000 006E // Clock source: System Clock
; 0000 006F // Clock value: Timer 0 Stopped
; 0000 0070 // Mode: Normal top=0xFF
; 0000 0071 // OC0 output: Disconnected
; 0000 0072 TCCR0=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0073 TCNT0=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0074 OCR0=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0075 
; 0000 0076 // Timer/Counter 1 initialization
; 0000 0077 // Clock source: System Clock
; 0000 0078 // Clock value: Timer1 Stopped
; 0000 0079 // Mode: Normal top=0xFFFF
; 0000 007A // OC1A output: Discon.
; 0000 007B // OC1B output: Discon.
; 0000 007C // Noise Canceler: Off
; 0000 007D // Input Capture on Falling Edge
; 0000 007E // Timer1 Overflow Interrupt: Off
; 0000 007F // Input Capture Interrupt: Off
; 0000 0080 // Compare A Match Interrupt: Off
; 0000 0081 // Compare B Match Interrupt: Off
; 0000 0082 TCCR1A=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0083 TCCR1B=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0084 TCNT1H=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0085 TCNT1L=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0086 ICR1H=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0087 ICR1L=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0088 OCR1AH=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0089 OCR1AL=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 008A OCR1BH=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 008B OCR1BL=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 008C 
; 0000 008D // Timer/Counter 2 initialization
; 0000 008E // Clock source: System Clock
; 0000 008F // Clock value: Timer2 Stopped
; 0000 0090 // Mode: Normal top=0xFF
; 0000 0091 // OC2 output: Disconnected
; 0000 0092 ASSR=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0093 TCCR2=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0094 TCNT2=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0095 OCR2=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0096 
; 0000 0097 // External Interrupt(s) initialization
; 0000 0098 // INT0: Off
; 0000 0099 // INT1: Off
; 0000 009A // INT2: Off
; 0000 009B MCUCR=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 009C MCUCSR=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 009D 
; 0000 009E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009F TIMSK=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A0 
; 0000 00A1 // USART initialization
; 0000 00A2 // USART disabled
; 0000 00A3 UCSRB=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00A4 
; 0000 00A5 // Analog Comparator initialization
; 0000 00A6 // Analog Comparator: Off
; 0000 00A7 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A8 ACSR=0x80;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A9 SFIOR=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00AA 
; 0000 00AB // ADC initialization
; 0000 00AC // ADC Clock frequency: 62.500 kHz
; 0000 00AD // ADC Voltage Reference: AVCC pin
; 0000 00AE // ADC Auto Trigger Source: ADC Stopped
; 0000 00AF ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00B0 ADCSRA=0x84;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00B1 
; 0000 00B2 // SPI initialization
; 0000 00B3 // SPI disabled
; 0000 00B4 SPCR=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B5 
; 0000 00B6 // TWI initialization
; 0000 00B7 // TWI disabled
; 0000 00B8 TWCR=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B9 while (1)
;PCODE: $000000F5 VOL: 0
; 0000 00BA       {
; 0000 00BB       // Place your code here
; 0000 00BC       PORTD.3=1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00BD       segshow(0);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00BE       PORTD.3=0;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00BF       PORTD.2=1;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00C0       segshow(1);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00C1       PORTD.2=0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00C2 
; 0000 00C3       }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00C4 }
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
